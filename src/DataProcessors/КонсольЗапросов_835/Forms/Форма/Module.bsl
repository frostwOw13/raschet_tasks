
// Клиент
&НаКлиенте
Перем мШиринаКолонокПоУмолчанию;

&НаКлиенте
Перем мСтрокаПеретаскивания;

&НаКлиенте
Перем мФормаОсобогоТипа;

&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	ТонкийКлиент();
	мШиринаКолонокПоУмолчанию = 15;
	мФормаОсобогоТипа = ПолучитьФорму(ПутьКФормам + "ФормаОсобогоТипа", , ЭтаФорма);
	мФормаОсобогоТипа.Инициализировать();
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		ФайлЗапросов = Новый Файл(ПутьКФайлу);
		Если ФайлЗапросов.Существует() Тогда
			ПередатьНаСервер(ПутьКФайлу); 
		Иначе
			ИнициализироватьДеревоЗапросов();
		КонецЕсли;
	Иначе
		ИнициализироватьДеревоЗапросов();
	КонецЕсли;
	СоставРезультатов = 1;
	УстановитьФильтрыПараметров();
	Элементы.ОткрытьКонструкторТонкийКлиент.Доступность = Версия_835();
КонецПроцедуры

&НаКлиенте
Функция Версия_835()
	Инфо = Новый СистемнаяИнформация();
	Возврат (ФракцияВерсии(Инфо.ВерсияПриложения, 2)>= 3) И (ФракцияВерсии(Инфо.ВерсияПриложения, 3)>= 5);
КонецФункции

&НаКлиенте
Функция ФракцияВерсии(Версия, Фракция)
	Возврат Число(СтрПолучитьСтроку(СтрЗаменить(Версия, ".", Символы.ПС), Фракция))
КонецФункции

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Модифицированность Тогда
		Отказ = Истина;
		СохранитьНаработки(Новый ОписаниеОповещения("Асинхрон_ПередЗакрытием", ЭтаФорма));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Асинхрон_ПередЗакрытием(Результат, ДополнительныеПараметры) Экспорт
	Модифицированность = Ложь;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Команда)
	#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
	ЭлементДерева = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ЭлементДерева <> Неопределено Тогда
		Если ЗначениеЗаполнено(ЭлементДерева.ТекстЗапроса) Тогда
			Конструктор = Новый КонструкторЗапроса(ЭлементДерева.ТекстЗапроса);
		Иначе
			Конструктор = Новый КонструкторЗапроса();
		КонецЕсли;
		Если Конструктор.ОткрытьМодально() Тогда
			ЭлементДерева.ТекстЗапроса = Конструктор.Текст;
		Иначе
			Модифицированность = Ложь;
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, "Запрос не выбран");
		Модифицированность = Ложь;
 	КонецЕсли;
	#КонецЕсли
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьКонструкторЗапросаТонкийКлиент(Команда)
	ЭлементДерева = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ЭлементДерева <> Неопределено Тогда
		Программа = 
		"Если ЗначениеЗаполнено(ЭлементДерева.ТекстЗапроса) Тогда
		|	Конструктор = Новый КонструкторЗапроса(ЭлементДерева.ТекстЗапроса);
		|Иначе
		|	Конструктор = Новый КонструкторЗапроса();
		|КонецЕсли;
		|Конструктор.Показать(Новый ОписаниеОповещения(""Асинхрон_КонструкторЗапроса"", ЭтаФорма, ЭлементДерева))";
		Выполнить(Программа);
	Иначе
		ПоказатьПредупреждение(, "Запрос не выбран");
		Модифицированность = Ложь;
 	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Асинхрон_КонструкторЗапроса(Текст, ЭлементДерева) Экспорт
	Если ЗначениеЗаполнено(Текст) Тогда
		ЭлементДерева.ТекстЗапроса = Текст;
		Модифицированность = Истина;
	Иначе
		Модифицированность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТонкийКлиент()
	#Если ТонкийКлиент ИЛИ ВебКлиент Тогда
	Заголовок = Заголовок + " (тонкий клиент)";
	//Элементы.ОткрытьКонструктор.Доступность = Ложь; 
	Элементы.ОткрытьКонструкторИзКонтекстногоМеню.Доступность = Ложь;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьДеревоЗапросов(Команда = Неопределено)
	СохранитьНаработки(Новый ОписаниеОповещения("Асинхрон_ИнициализироватьДеревоЗапросов", ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура Асинхрон_ИнициализироватьДеревоЗапросов(Результат, ДополнительныеПараметры) Экспорт
	ПутьКФайлу = "";
	Запросы = ДеревоЗапросов.ПолучитьЭлементы();
	Запросы.Очистить();
	ИнициализироватьЗапрос(Запросы.Добавить(), "Запросы");
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	ЭлементДерева = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ЭлементДерева <> Неопределено Тогда
		ПараметрыЗапроса = ЭлементДерева.ПараметрыЗапроса;
		ВыполнитьТекстЗапроса(ЭлементДерева.ТекстЗапроса, ПараметрыЗапроса, ЭлементДерева.СпособВыгрузки);
		Элементы.ПанельЗапросы.ТекущаяСтраница = Элементы.СтраницаРезультат;
	Иначе
		ПоказатьПредупреждение(, "Запрос не выбран");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлЗапросов(Команда)
	СохранитьНаработки(Новый ОписаниеОповещения("Асинхрон_ЗагрузитьФайлЗапросов", ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура Асинхрон_ЗагрузитьФайлЗапросов(Результат, ДополнительныеПараметры) Экспорт
	Диалог = ПолучитьДиалогВыбораФайла();
	Если Диалог.Выбрать() Тогда
		ПутьКФайлу = Диалог.ПолноеИмяФайла;
		ПередатьНаСервер(ПутьКФайлу); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлЗапросов(Команда = Неопределено)
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу) Тогда
		Диалог = ПолучитьДиалогВыбораФайла();
		Если Диалог.Выбрать() Тогда
			ПутьКФайлу = Диалог.ПолноеИмяФайла;	
			ПреобразоватьИСохранитьДерево(ПутьКФайлу);
			Модифицированность = Ложь;
		КонецЕсли;
	Иначе
		ПреобразоватьИСохранитьДерево(ПутьКФайлу);
		Модифицированность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗапрос(Команда)
	ГридДереваЗапросов = Элементы.ДеревоЗапросов;
	ТекущийЗапрос = ГридДереваЗапросов.ТекущиеДанные;
	Если ТекущийЗапрос <> Неопределено Тогда
		ГридДереваЗапросов.ДобавитьСтроку();
		НовыйЗапрос = ГридДереваЗапросов.ТекущиеДанные;
		ИнициализироватьЗапрос(НовыйЗапрос, "<без названия>");
		Модифицированность = Истина;
	Иначе
		ПоказатьПредупреждение(, "Запрос-родитель не выбран");
		Модифицированность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьЗапрос(Команда)
	ГридЗапросов = Элементы.ДеревоЗапросов;
	ТекущийЗапрос = ГридЗапросов.ТекущиеДанные;
	Если ТекущийЗапрос <> Неопределено Тогда
		РодительТекущего = ТекущийЗапрос.ПолучитьРодителя();
		Если РодительТекущего <> Неопределено Тогда
			НовыйЗапрос = РодительТекущего.ПолучитьЭлементы().Добавить();
			СкопироватьСтрокуДереваЗапросов(НовыйЗапрос, ТекущийЗапрос);
			ГридЗапросов.ТекущаяСтрока = НовыйЗапрос.ПолучитьИдентификатор();
		Иначе
			ПоказатьПредупреждение(, "Нельзя скопировать корневой элемент");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗапрос(Команда)
	ТекущийЗапрос = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущийЗапрос <> Неопределено Тогда
		Родитель = ТекущийЗапрос.ПолучитьРодителя();
		Если Родитель <> Неопределено Тогда
			Родитель.ПолучитьЭлементы().Удалить(ТекущийЗапрос);
		Иначе
			ПоказатьПредупреждение(, "Нельзя удалить корневой элемент");
			Модифицированность = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапросВверх(Команда)
	СдвинутьЗапрос(-1);
КонецПроцедуры

&НаКлиенте
Процедура ЗапросВниз(Команда)
	СдвинутьЗапрос(1);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметры(Команда)
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ПараметрыЗапроса.Количество() > 0 Тогда
			Оповещение = Новый ОписаниеОповещения("Асинхрон_СписокПараметровБудетОчищен", ЭтаФорма, );
			ПоказатьВопрос(Оповещение, "Список параметров будет очищен. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Иначе
			ЗаполнениеПараметров(ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура Асинхрон_СписокПараметровБудетОчищен(Ответ, Параметр) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнениеПараметров(Элементы.ДеревоЗапросов.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнениеПараметров(ТекущиеДанные)
	ЗначениеВозврата = ВызовЗаполнитьПараметры(ТекущиеДанные.ПолучитьИдентификатор());
	Если ТипЗнч(ЗначениеВозврата) = Тип("Структура") Тогда
		ТекущиеДанные.ПараметрыЗапроса.Очистить();
		Для каждого ПараметрЗапроса из ЗначениеВозврата Цикл
			НовыйПараметр = ТекущиеДанные.ПараметрыЗапроса.Добавить();
			НовыйПараметр.ИмяПараметра = ПараметрЗапроса.Ключ;
			НовыйПараметр.ЗначениеПараметра = ПараметрЗапроса.Значение.ПривестиЗначение(НовыйПараметр.ЗначениеПараметра);
		КонецЦикла;
		УстановитьФильтрыПараметров();
	Иначе
		Сообщить(ЗначениеВозврата);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРезультат(Команда)
	Если ПолеРезультатаЗапроса.ВысотаТаблицы > 0 Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.Фильтр = "Файл Excel (*.xls)|*.xls|Табличный документ (*.mxl)|*.mxl";
		Если Диалог.Выбрать() Тогда
			Файл = Новый Файл(Диалог.ПолноеИмяФайла);
			Если Файл.Расширение = ".mxl" Тогда
				ТипФайла = ТипФайлаТабличногоДокумента.MXL;
			ИначеЕсли Файл.Расширение = ".xls" Тогда
				ТипФайла = ТипФайлаТабличногоДокумента.XLS;
			КонецЕсли;
			ПолеРезультатаЗапроса.Записать(Диалог.ПолноеИмяФайла, ТипФайла);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	Диалог = ПолучитьДиалогВыбораФайла();
	Если Диалог.Выбрать() Тогда
		Путь = Диалог.ПолноеИмяФайла;	
		Проверка = Новый Файл(Путь);
		Если Проверка.Существует() Тогда
			Оповещение = Новый ОписаниеОповещения("Асинхрон_СохранитьКак", ЭтаФорма, Путь);
			ПоказатьВопрос(Оповещение, "Файл '" + Путь + "' существует. Заменить?", РежимДиалогаВопрос.ДаНет);
		Иначе
			ПреобразоватьИСохранитьДерево(Путь);
			ПутьКФайлу = Путь;
		КонецЕсли;
		Модифицированность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Асинхрон_СохранитьКак(Ответ, Путь) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПреобразоватьИСохранитьДерево(Путь);
		ПутьКФайлу = Путь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыделенныйТекст(Команда)
	ЭлементДерева = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ЭлементДерева <> Неопределено Тогда
		ПараметрыЗапроса = ЭлементДерева.ПараметрыЗапроса;
		ВыполнитьТекстЗапроса(Элементы.ТекстЗапроса.ВыделенныйТекст, ПараметрыЗапроса, 1);
		Элементы.ПанельЗапросы.ТекущаяСтраница = Элементы.СтраницаРезультат;
	Иначе
		ПоказатьПредупреждение(, "Запрос должен быть выделен в дереве");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КакПереподчинить(Команда)
	ПоказатьПредупреждение(, "Для изменения подчиненности просто перетащите элемент мышью на нового родителя");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРезультат(Команда)
	ПолеРезультатаЗапроса = Новый ТабличныйДокумент();
	ВремяВыполнения = "";
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекстЗапроса(Команда)
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ТекстЗапроса = "";
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОсобыйТипПараметра(Команда)
	ОткрытьФормуОсобогоПараметра();
КонецПроцедуры

&НаКлиенте
Процедура ПолеРезультатаЗапросаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Если ТипЗнч(Расшифровка) = Тип("ТабличныйДокумент") Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВложеннойТаблицы = ПолучитьФорму(ПутьКФормам + "ФормаВложеннойТаблицы");
		ФормаВложеннойТаблицы.ВладелецФормы                 = ЭтаФорма;
		ФормаВложеннойТаблицы.ЗакрыватьПриЗакрытииВладельца = Истина;
		ФормаВложеннойТаблицы.ШиринаКолонок                 = мШиринаКолонокПоУмолчанию;
		ФормаВложеннойТаблицы.ВложеннаяТаблица              = Расшифровка;
		ФормаВложеннойТаблицы.ВложеннаяТаблица.Область().ШиринаКолонки = мШиринаКолонокПоУмолчанию;
		ФормаВложеннойТаблицы.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИмяЗапросаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТекстЗапросаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолеШиринаКолонокРегулирование(Элемент)
	УстановитьШиринуКолонок();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпособВыгрузкиПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗначениеПараметраОчистка(Элемент, СтандартнаяОбработка)
	Элементы.СписокПараметров.ТекущиеДанные.ЗначениеПараметра = Неопределено;
	Элемент.ВыбиратьТип  = Истина;
	Элемент.КнопкаВыбора = Истина;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗначениеПараметраПриИзменении(Элемент)
	ТекущееОписание = Элементы.СписокПараметров.ТекущиеДанные;
	Значение = ТекущееОписание.ЗначениеПараметра;
	Если ТипЗнч(Значение) = Тип("ОписаниеТипов") Тогда
		ЗаданныеТипы = Значение.Типы();
		Если ЗаданныеТипы.Количество() > 1 Тогда
			МассивТипов = Новый Массив();
			МассивТипов.Добавить(ЗаданныеТипы[0]);
			ТекущееОписание.ЗначениеПараметра = Новый ОписаниеТипов(МассивТипов);
			ПоказатьПредупреждение(, "Задан составной тип. Будет использован первый из состава типов");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровПередНачаломИзменения(Элемент, Отказ)
	ТекущийЭлементГрида = Элемент.ТекущийЭлемент;
	Если ТекущийЭлементГрида.Имя = "СписокПараметровЗначениеПараметра" Тогда
		Если Элемент.ТекущиеДанные.ЗначениеПараметра = Неопределено Тогда
			ТекущийЭлементГрида.ВыбиратьТип = Истина;
		Иначе
			ТекущийЭлементГрида.ВыбиратьТип = Ложь;
		КонецЕсли;
	ИначеЕсли ТекущийЭлементГрида.Имя = "СписокПараметровОсобыйТип" Тогда
		ПоказатьПредупреждение(, "Параметр перемещен в список особых параметров");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокОсобыхПараметровПередНачаломИзменения(Элемент, Отказ)
	ПоказатьПредупреждение(, "Параметр перемещен в список общих параметров с неопределенным типом");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСпрятатьЗаголовки(Команда)
	ПолеРезультата = Элементы.ПолеРезультатаЗапроса;
	ПолеРезультата.ОтображатьЗаголовки = НЕ ПолеРезультата.ОтображатьЗаголовки;
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровПриИзменении(Элемент)
	УстановитьФильтрыПараметров();
КонецПроцедуры

&НаКлиенте
Процедура СписокОсобыхПараметровПриИзменении(Элемент)
	УстановитьФильтрыПараметров();
КонецПроцедуры

&НаКлиенте
Процедура СписокОсобыхПараметровПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		ДанныеСтроки.ЗначениеПараметра = СтрокаНеопределено;
		ДанныеСтроки.Примечание        = ВРег(Строка(ТипЗнч(Неопределено)));
		ДанныеСтроки.ОсобыйТип         = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровОсобыйТипПриИзменении(Элемент)
	ДанныеСтроки = Элементы.СписокПараметров.ТекущиеДанные;
	ДанныеСтроки.ЗначениеПараметра = СтрокаНеопределено;
	ДанныеСтроки.Примечание = ВРег(Строка(ТипЗнч(Неопределено)));
	УстановитьФильтрыПараметров();
	Элементы.ГруппаОбщиеИОсобые.ТекущаяСтраница = Элементы.СтраницаОсобые;
КонецПроцедуры

&НаКлиенте
Процедура СписокОсобыхПараметровОсобыйТипПриИзменении(Элемент)
	Элементы.СписокОсобыхПараметров.ТекущиеДанные.ЗначениеПараметра = Неопределено;
	УстановитьФильтрыПараметров();
	Элементы.ГруппаОбщиеИОсобые.ТекущаяСтраница = Элементы.СтраницаОбщие;
КонецПроцедуры

&НаКлиенте
Процедура СписокОсобыхПараметровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуОсобогоПараметра();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	мСтрокаПеретаскивания = Элемент.ТекущиеДанные;
	ПараметрыПеретаскивания.Значение = "";
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если Строка <> Неопределено Тогда
		Переподчинение = Новый Структура("НовыйРодитель, Потомок, ПрежнийРодитель");
		Переподчинение.НовыйРодитель = ДеревоЗапросов.НайтиПоИдентификатору(Строка);
		Переподчинение.Потомок = мСтрокаПеретаскивания;
		Переподчинение.ПрежнийРодитель = Переподчинение.Потомок.ПолучитьРодителя();
		Если НЕ ((Переподчинение.ПрежнийРодитель = Неопределено) ИЛИ (Строка = Переподчинение.ПрежнийРодитель.ПолучитьИдентификатор())) Тогда
			Если НЕ ВИерархии(Переподчинение.НовыйРодитель, Переподчинение.Потомок) Тогда
				Оповещение = Новый ОписаниеОповещения("Асинхрон_Переподчинение", ЭтаФорма, Переподчинение);
				ПоказатьВопрос(Оповещение, "Переподчинить элемент """ + Переподчинение.Потомок.Запрос + """ элементу """ + Переподчинение.НовыйРодитель.Запрос + """?", РежимДиалогаВопрос.ДаНет);
			Иначе
				ПоказатьПредупреждение(, "Зацикливание подчиненности - переподчинение невозможно");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Асинхрон_Переподчинение(Ответ, Переподчинение) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Подчинить(Переподчинение.Потомок, Переподчинение.НовыйРодитель.ПолучитьЭлементы());
		ПрежняяСемья = Переподчинение.ПрежнийРодитель.ПолучитьЭлементы();
		ПрежняяСемья.Удалить(ПрежняяСемья.Индекс(Переподчинение.Потомок));
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОсобогоПараметра()
	СтрокаПараметра = Элементы.СписокОсобыхПараметров.ТекущиеДанные;
	Если СтрокаПараметра <> Неопределено Тогда
		Если СтрокаПараметра.ОсобыйТип Тогда
			мФормаОсобогоТипа.ИмяПараметра = СтрокаПараметра.ИмяПараметра;
			мФормаОсобогоТипа.СтроковоеЗначениеПараметра = СтрокаПараметра.ЗначениеПараметра;
			мФормаОсобогоТипа.Открыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Асинхрон_ФормаОсобогоТипа(СтруктураРезультата) Экспорт
	СтрокаПараметра = Элементы.СписокОсобыхПараметров.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтруктураРезультата) Тогда
		СтрокаПараметра.ИмяПараметра      = СтруктураРезультата.ИмяПараметра;
		СтрокаПараметра.ЗначениеПараметра = СтруктураРезультата.Результат;
		СтрокаПараметра.Примечание        = ВРег(СтруктураРезультата.СтрокаТипРезультата);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтрокуДереваЗапросов(НовыйЗапрос, ТекущийЗапрос)
	ЗаполнитьЗначенияСвойств(НовыйЗапрос, ТекущийЗапрос, , "ПараметрыЗапроса");
	ПараметрыТекущего = ТекущийЗапрос.ПараметрыЗапроса;
	ПараметрыНового = НовыйЗапрос.ПараметрыЗапроса;
	Для каждого СтрокаПараметр из ПараметрыТекущего Цикл
		СтрокаПараметрНового = ПараметрыНового.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПараметрНового, СтрокаПараметр);
	КонецЦикла;
	ДочерниеЗапросы = ТекущийЗапрос.ПолучитьЭлементы();
	ДочерниеЗапросыНового = НовыйЗапрос.ПолучитьЭлементы();
	Для каждого ДочернийЗапрос из ДочерниеЗапросы Цикл;
		НовыйДочернийЗапрос = ДочерниеЗапросыНового.Добавить();
		СкопироватьСтрокуДереваЗапросов(НовыйДочернийЗапрос, ДочернийЗапрос);
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьТекстЗапроса(ТекстЗапроса, ПараметрыЗапроса, СпособВыгрузки)
	ВремяВыполнения = "";
	ОбновитьОтображениеДанных();	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ПолеРезультатаЗапроса = Новый ТабличныйДокумент();
		Начало = ТекущаяДата();
		Результат = ВызовВыполнитьЗапрос(ТекстЗапроса, ПараметрыЗапроса, СпособВыгрузки);
		Окончание = ТекущаяДата();
		ФорматВремени = "ДЛФ=В";
		ВремяВыполнения = "нач." + Формат(Начало, ФорматВремени) + "  оконч." + Формат(Окончание, ФорматВремени);
		Если ТипЗнч(Результат) = Тип("ТабличныйДокумент") Тогда
			ПолеРезультатаЗапроса = Результат;
			Элементы.ПолеРезультатаЗапроса.ТекущаяОбласть = Результат.Область(1, 1, 1, 1);
			УстановитьШиринуКолонок();
		Иначе
			Сообщить(Результат);
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, "Текст запроса пустой");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШиринуКолонок()
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ШиринаКолонок = ТекущиеДанные.ШиринаКолонок;
		Если ШиринаКолонок > 0 Тогда
			ПолеРезультатаЗапроса.Область().ШиринаКолонки = ШиринаКолонок;
		Иначе
			ПолеРезультатаЗапроса.Область().ШиринаКолонки = мШиринаКолонокПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДиалогВыбораФайла()
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок  = "Выберите файл со списком запросов";
	Диалог.Фильтр     = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
	Диалог.Расширение = "sel";
	Возврат Диалог;
КонецФункции

&НаКлиенте
Процедура СохранитьНаработки(ПолиморфнаяДоработка = Неопределено)
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("Асинхрон_СохранитьФайлЗапросов", ЭтаФорма, ПолиморфнаяДоработка);
		ПоказатьВопрос(Оповещение, "Сохранить файл запросов?", РежимДиалогаВопрос.ДаНет);
	Иначе
		Если ПолиморфнаяДоработка <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ПолиморфнаяДоработка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Асинхрон_СохранитьФайлЗапросов(Ответ, ПолиморфнаяДоработка) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьФайлЗапросов();
	Иначе
		Модифицированность = Ложь;
	КонецЕсли;
	Если ПолиморфнаяДоработка <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ПолиморфнаяДоработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьЗапрос(ЭлементДереваЗапросов, ИмяЗапроса = "")
	ЭлементДереваЗапросов.Запрос         = ИмяЗапроса;
	ЭлементДереваЗапросов.ТекстЗапроса   = "";
	ЭлементДереваЗапросов.СпособВыгрузки = 1;
	ЭлементДереваЗапросов.ШиринаКолонок  = мШиринаКолонокПоУмолчанию;
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьЗапрос(Направление)
	ТекущийЗапрос = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущийЗапрос <> Неопределено Тогда
		Родитель = ТекущийЗапрос.ПолучитьРодителя();
		Если Родитель <> Неопределено Тогда
			Семейство = Родитель.ПолучитьЭлементы();
			Индекс = Семейство.Индекс(ТекущийЗапрос);
			Если ((Направление = 1) И (Индекс < Семейство.Количество() - 1)) 
				ИЛИ ((Направление = -1) И (Индекс > 0)) Тогда
					Семейство.Сдвинуть(Индекс, Направление);
					Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьИСохранитьДерево(ПутьКФайлу)
	АдресХранилища = ВызовПреобразоватьДерево();
	ПолучитьФайл(АдресХранилища, ПутьКФайлу, Ложь);
	УдалитьИзВременногоХранилища(АдресХранилища);
КонецПроцедуры

&НаКлиенте
Функция ВИерархии(НовыйРодитель, Потомок)
	ПредокНовогоРодителя = НовыйРодитель.ПолучитьРодителя();
	Проверять = Истина;
	Результат = Ложь;
	Пока Проверять Цикл
		Если ПредокНовогоРодителя <> Неопределено Тогда
			Если ПредокНовогоРодителя = Потомок Тогда
				Проверять = Ложь;
				Результат = Истина;
			Иначе
				ПредокНовогоРодителя = ПредокНовогоРодителя.ПолучитьРодителя();
			КонецЕсли;
		Иначе
			Проверять = Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура Подчинить(Потомок, НоваяСемья)
	НоваяСтрока = НоваяСемья.Добавить();
	НоваяСтрока.Запрос         = Потомок.Запрос;
	НоваяСтрока.ТекстЗапроса   = Потомок.ТекстЗапроса;
	НоваяСтрока.СпособВыгрузки = Потомок.СпособВыгрузки;
	НоваяСтрока.ШиринаКолонок  = Потомок.ШиринаКолонок;
	СкопироватьПараметры(НоваяСтрока.ПараметрыЗапроса, Потомок.ПараметрыЗапроса);
	ПотомкиПотомка = Потомок.ПолучитьЭлементы();
	Для Каждого ПотомокПотомка из ПотомкиПотомка Цикл
		Подчинить(ПотомокПотомка, НоваяСтрока.ПолучитьЭлементы());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПараметры(ТаблицаПриемник, ТаблицаИсточник)
	Для каждого СтрокаИсточник из ТаблицаИсточник Цикл
		НоваяСтрока = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
	КонецЦикла;
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьФильтрыПараметров()
	ИмяКолонки = "ОсобыйТип";
	Элементы.СписокПараметров.ОтборСтрок = Новый ФиксированнаяСтруктура(ИмяКолонки, Ложь);	
	Элементы.СписокОсобыхПараметров.ОтборСтрок = Новый ФиксированнаяСтруктура(ИмяКолонки, Истина);	
КонецПроцедуры

&НаКлиенте
Функция ПередатьНаСервер(ПутьКФайлу)
	Оповещение = Новый ОписаниеОповещения("Асинхрон_ПомещениеФайла", ЭтаФорма);
	НачатьПомещениеФайла(Оповещение, , ПутьКФайлу, Ложь, УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура Асинхрон_ПомещениеФайла(РезультатРаботы, АдресХранилища, ПутьКФайлу, Параметры) Экспорт
	ВызовПолучитьДерево(АдресХранилища, мШиринаКолонокПоУмолчанию);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПутьКФормам = ПолучитьОбработку().Метаданные().ПолноеИмя() + ".Форма.";
	СтрокаНеопределено = ЗначениеВСтрокуВнутр(Неопределено);
	ПутьКФайлу = ХранилищеОбщихНастроек.Загрузить("ПутьКФайлу");
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	Для каждого ЭлементСоответствия из Настройки Цикл
		ХранилищеОбщихНастроек.Сохранить(ЭлементСоответствия.Ключ, , ЭлементСоответствия.Значение);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ВызовВыполнитьЗапрос(ТекстЗапроса, ПараметрыЗапроса, СпособВыгрузки)
	Возврат ПолучитьОбработку().ВыполнитьЗапрос(ТекстЗапроса, ПараметрыЗапроса, СпособВыгрузки, СоставРезультатов, ДляСсылокВыводитьГУИД);
КонецФункции

&НаСервере
Процедура ВызовПолучитьДерево(АдресХранилища, ШиринаКолонокПоУмолчанию)
	ПолучитьОбработку().ПолучитьДеревоИзФайла(АдресХранилища, ДеревоЗапросов, ШиринаКолонокПоУмолчанию);
КонецПроцедуры

&НаСервере
Функция ВызовПреобразоватьДерево()
	Возврат ПолучитьОбработку().ПреобразоватьДерево(ДеревоЗапросов);
КонецФункции

&НаСервере
Функция ВызовЗаполнитьПараметры(ИдентификаторТекущихДанных)
	Возврат ПолучитьОбработку().ЗаполнитьПараметрыЗапроса(ДеревоЗапросов, ИдентификаторТекущихДанных);
КонецФункции

&НаСервере
Функция ПолучитьОбработку()
	Возврат РеквизитФормыВЗначение("ОбработкаКонсольЗапросов");
КонецФункции



